I"GM<p>2019 is swamped with JavaScript frameworks and we have arrived in a moment when choosing your favourite is a matter of project-based preference only. From the most mature ones, I would say I like React but I love Vue. I believe there’s a simple elegance in the way it handles data and a lot of flexibility in how it can be used, from a simple component to huge PWAs.</p>

<p><a href="https://gracious-cori-4bd380.netlify.com/" target="_blank"><strong>See it live</strong></a></p>

<p>I decided to take on this project as a way to explore Vue a little more in-depth and also try the amazing <a href="https://pokeapi.co/">PokéAPI</a>. Before we start, <a href="https://github.com/vphilot/vue-pokemon-explorer">here’s the full source code on Github</a>.</p>

<h3 class="intro title is-3 has-text-weight-normal has-line-spacing-tall" id="install-vue-cli-and-clone-the-starter-project">Install Vue CLI and clone the starter project</h3>

<p>The Vue CLI interface provides a great tool to project boilerplate projects right out of the box. Assuming you have Node.js installed, run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install</span> <span class="nt">-g</span> @vue/cli
</code></pre></div></div>

<p>And create a new project with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vue create vue-pokemon-explorer
</code></pre></div></div>

<p>After deleting most of the boilerplate structure, this is the project tree I ended up with:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── src
│   ├── main.js
│   ├── components
│   │   ├── PokemonCard.vue
│   │   └── Main.vue
│   ├── assets
│   │   └── logo.png
│   └── App.vue
├── public
│   ├── index.html
│   └── favicon.ico
├── package.json
├── package-lock.json
├── babel.config.js
└── README.md
</code></pre></div></div>

<p>I chose to keep it simple and only have 2 main components: <code class="language-plaintext highlighter-rouge">Main.vue</code> and <code class="language-plaintext highlighter-rouge">PokemonCard.vue</code>. Even though the project is very small, I chose to stick with <a href="https://vuejs.org/v2/guide/single-file-components.html">Single File Components</a> because it’s a good way to get familiar with the framework’s best practices. This means that HTML, CSS, and (vue-specific) JS will live inside the same file, making it easier to isolate functionality and troubleshoot bugs on a beginner level.</p>

<h3 class="intro title is-3 has-text-weight-normal has-line-spacing-tall" id="picking-a-styled-component-library">Picking a styled component library</h3>

<p>Since the project is just a playground, I wasn’t too worried about creating my CSS from scratch. That’s why I chose <a href="https://buefy.org/">Buefy</a> — I love <a href="https://bulma.io/">Bulma</a> and its flexbox system for columns. Moreover, Buefy provides a large set of <a href="https://buefy.org/documentation/input">UI components</a> with great functionality right out of the box. Just run the npm command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">install </span>buefy
</code></pre></div></div>

<p>After that, we have to import it in our top-level <code class="language-plaintext highlighter-rouge">main.js</code> so it becomes available to all the Vue instances:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Vue</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">vue</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App.vue</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Buefy</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">buefy</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">buefy/dist/buefy.min.css</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<h3 class="intro title is-3 has-text-weight-normal has-line-spacing-tall" id="building-the-search-input-and-binding-data">Building the search input and binding data</h3>

<p>For the Serch input, inside the <code class="language-plaintext highlighter-rouge">&lt;template&gt;</code> section of <code class="language-plaintext highlighter-rouge">Main.vue</code>, we can take advantage of Buefy’s custom components (hence the “b-“ before <code class="language-plaintext highlighter-rouge">button</code> and <code class="language-plaintext highlighter-rouge">input</code>) and use the <strong>Vue directive</strong> <code class="language-plaintext highlighter-rouge">v-model</code> to bind whatever’s typed in the search form to a data object inside our component. This will make Vue react to changes every time a user types a character and give us methods to deal with that. <code class="language-plaintext highlighter-rouge">searchPokemon</code> will execute anytime the input is submitted, while <code class="language-plaintext highlighter-rouge">updateSuggestionsList</code> will execute immediately anytime our user types something.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template&gt;</span>
  <span class="nt">&lt;b-input</span>
    <span class="na">id=</span><span class="s">"search"</span>
    <span class="na">v-model=</span><span class="s">"term"</span>
    <span class="err">@</span><span class="na">keyup.native.enter=</span><span class="s">"searchPokemon"</span>
    <span class="err">@</span><span class="na">input=</span><span class="s">"updateSuggestionsList"</span>
  <span class="nt">/&gt;</span>
  <span class="nt">&lt;b-button</span> <span class="na">type=</span><span class="s">"is-primary"</span> <span class="err">@</span><span class="na">click.prevent=</span><span class="s">"searchPokemon"</span><span class="nt">&gt;</span>
    Search
  <span class="nt">&lt;/b-button&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></div></div>

<p>Now it’s time to bind these values to the data in our <code class="language-plaintext highlighter-rouge">Main.vue</code> in the <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> section. We’ll also build the structure of our <code class="language-plaintext highlighter-rouge">result</code> object inside the component — we’ll use this to store all the information we’ll get back from the API and pass it onto our other component, <code class="language-plaintext highlighter-rouge">PokemonCard.vue</code>, which will react to changes and re-render whenever we get a new result. Interesting to notice that, even though we’re not using TypeScript here, Vue requires us to specify what kind of data do expect from each property.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Main</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">components</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// imported components will go here</span>
  <span class="p">},</span>
  <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// props will go here (more on that later)</span>
  <span class="p">}</span>
  <span class="nx">data</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="na">term</span><span class="p">:</span> <span class="dl">"</span><span class="s2">wobbuffet</span><span class="dl">"</span><span class="p">,</span>
        <span class="c1">// this will also serve as a</span>
        <span class="c1">// default search item on app start</span>
        <span class="na">result</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
            <span class="na">imgs</span><span class="p">:</span> <span class="p">[],</span>
            <span class="na">height</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
            <span class="na">weight</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
            <span class="na">abilities</span><span class="p">:</span> <span class="p">[],</span>
            <span class="na">types</span><span class="p">:</span> <span class="p">[]</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Then we’ll move on to the fun section: fetching the PokéAPI!</p>

<h3 class="intro title is-3 has-text-weight-normal has-line-spacing-tall" id="how-to-handle-api-requests-in-vue">How to handle API Requests in Vue</h3>

<p>Using Vue means taking advantage of <em>Fetch</em> to make HTTP calls way more simple than dealing with the old XMLHttpRequest request model. Our starter project already contains a transpiling utility to ES5 with Babel, so compatibility is not a huge concern here. Fetch will return a simple Promise that will make populating data from APIs a breeze based on whether the call is successful or not. Here’s the basic syntax on how to use it:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fetch</span><span class="p">(</span><span class="s2">`https://someapi.com?params`</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">!==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//a 200 response should return an error and inform the user</span>
    <span class="p">}</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">//do something with all this data!</span>
    <span class="p">});</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div>

<p>Based on this same structure, we can build the Search function as a <code class="language-plaintext highlighter-rouge">method</code> in our <code class="language-plaintext highlighter-rouge">Main.vue</code> component:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// .. components, props, data</span>
<span class="nx">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">searchPokemon</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">fetch</span><span class="p">(</span><span class="s2">`https://pokeapi.co/api/v2/pokemon/</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">getTerm</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">!==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s2">`we have a problem with status code </span><span class="p">${</span><span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="c1">// these are specifics on how PokéAPI formats its data</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
                <span class="kd">let</span> <span class="nx">pickedImgs</span> <span class="o">=</span> <span class="p">[</span>
                    <span class="nx">data</span><span class="p">.</span><span class="nx">sprites</span><span class="p">.</span><span class="nx">back_default</span><span class="p">,</span>
                    <span class="nx">data</span><span class="p">.</span><span class="nx">sprites</span><span class="p">.</span><span class="nx">front_default</span>
                <span class="p">]</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">imgs</span> <span class="o">=</span> <span class="nx">pickedImgs</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">);</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">weight</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">abilities</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">abilities</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">types</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">types</span><span class="p">;</span>
            <span class="p">});</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 class="intro title is-3 has-text-weight-normal has-line-spacing-tall" id="passing-data-to-a-child-component">Passing data to a child component</h3>

<p>Inside our <code class="language-plaintext highlighter-rouge">PokemonCard.vue</code> component, we need to be prepared to receive all this data from <code class="language-plaintext highlighter-rouge">Main.vue</code>. The easiest way of accomplishing that is by using <code class="language-plaintext highlighter-rouge">props</code>, a type of data specifically designed to pass information from parent to child component. But first we need to initialize it inside <code class="language-plaintext highlighter-rouge">PokemonCard.vue</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">PokemonCard</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">imgs</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">height</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">weight</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">abilities</span><span class="p">:</span> <span class="p">{},</span>
        <span class="na">types</span><span class="p">:</span> <span class="p">{}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Then we can reference the child component inside our parent <code class="language-plaintext highlighter-rouge">Main.vue</code>, using again the <code class="language-plaintext highlighter-rouge">v-bind</code> directive to make it react to data changes. This way, every time a new Search is submitted and our parent component data is updated, the <code class="language-plaintext highlighter-rouge">PokemonCard</code> component will automatically re-render with little to no effort on our side.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;PokemonCard</span> 
    <span class="na">v-bind:name=</span><span class="s">"this.result.name"</span>
    <span class="na">v-bind:imgs=</span><span class="s">"this.result.imgs"</span>
    <span class="na">v-bind:height=</span><span class="s">"this.result.height"</span>
    <span class="na">v-bind:weight=</span><span class="s">"this.result.weight"</span>
    <span class="na">v-bind:abilities=</span><span class="s">"this.result.abilities"</span>
    <span class="na">v-bind:types=</span><span class="s">"this.result.types"</span> <span class="nt">&gt;</span>
<span class="nt">&lt;/PokemonCard&gt;</span>
</code></pre></div></div>

<p>And here we go! With a few more twists, we’re able to fully set up a simple Pokémon Explorer that is super fast and takes advantage of Vue and its component system to save a lot of time and effort. <a href="https://github.com/vphilot/vue-pokemon-explorer">Check the full source code on GitHub</a> or <a href="https://gracious-cori-4bd380.netlify.com/">see it live</a>.</p>
:ET